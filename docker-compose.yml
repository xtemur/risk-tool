version: '3.8'

services:
  # Main Risk Management API
  risk-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: risk-management-api
    ports:
      - "8000:8000"
    environment:
      - RISK_ENV=production
      - RISK_LOG_LEVEL=INFO
      - RISK_API_KEY=${RISK_API_KEY:-default-key}
    volumes:
      - ./data:/app/data:ro
      - ./outputs:/app/outputs
      - ./config:/app/config:ro
    networks:
      - risk-network
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: risk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - risk-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: risk-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    networks:
      - risk-network
    depends_on:
      - risk-api
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: risk-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - risk-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: risk-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - risk-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation with ELK stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: risk-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - risk-network
    restart: unless-stopped
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: risk-logstash
    volumes:
      - ./deployment/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./outputs/logs:/var/log/app:ro
    networks:
      - risk-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: risk-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - risk-network
    depends_on:
      - elasticsearch
    restart: unless-stopped
    profiles:
      - logging

  # Development services
  risk-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: risk-management-api-dev
    ports:
      - "8001:8000"
    environment:
      - RISK_ENV=development
      - RISK_LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - /app/outputs  # Anonymous volume for outputs
    networks:
      - risk-network
    profiles:
      - dev

  # Testing service
  risk-tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: risk-tests
    environment:
      - RISK_ENV=test
    volumes:
      - .:/app
    networks:
      - risk-network
    command: python -m pytest tests/ -v --cov=src --cov-report=html
    profiles:
      - test

networks:
  risk-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
