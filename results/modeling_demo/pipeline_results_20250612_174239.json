{
  "config": {
    "TRAINING_WINDOW_MONTHS": 6,
    "MIN_TRAINING_MONTHS": 3,
    "MIN_SAMPLES_PER_TRADER": 10,
    "CV_FOLDS": 2,
    "SAVE_MODELS": true,
    "PLOT_RESULTS": false,
    "FEATURE_SELECTION": false,
    "HANDLE_MISSING": "median"
  },
  "data_summary": {
    "total_samples": 1795,
    "training_samples": 1613,
    "holdout_samples": 182,
    "traders": 3
  },
  "walk_forward_results": {
    "model_types": [
      "ridge"
    ],
    "individual_traders": true,
    "results_by_fold": [],
    "aggregate_results": {},
    "trader_3946": {
      "trader_id": 3946,
      "folds": [
        {
          "fold_num": 1,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 2,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 3,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 4,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 5,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 6,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 7,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 8,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 9,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 10,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 11,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 12,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        }
      ],
      "aggregate": {}
    },
    "trader_3957": {
      "trader_id": 3957,
      "folds": [
        {
          "fold_num": 1,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 2,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 3,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 4,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 5,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 6,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 7,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 8,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 9,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 10,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 11,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 12,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        }
      ],
      "aggregate": {}
    },
    "trader_3978": {
      "trader_id": 3978,
      "folds": [
        {
          "fold_num": 1,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 2,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 3,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 4,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 5,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 6,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 7,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 8,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 9,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 10,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 11,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        },
        {
          "fold_num": 12,
          "models": {
            "ridge": {
              "error": "\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n10 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 866, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/base.py\", line 1389, in wrapper\n    return fit_method(estimator, *args, **kwargs)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/linear_model/_ridge.py\", line 1239, in fit\n    X, y = validate_data(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 2961, in validate_data\n    X, y = check_X_y(X, y, **check_params)\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1370, in check_X_y\n    X = check_array(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 1107, in check_array\n    _assert_all_finite(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 120, in _assert_all_finite\n    _assert_all_finite_element_wise(\n  File \"/opt/homebrew/anaconda3/envs/risk-tool/lib/python3.9/site-packages/sklearn/utils/validation.py\", line 169, in _assert_all_finite_element_wise\n    raise ValueError(msg_err)\nValueError: Input X contains NaN.\nRidge does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values\n"
            }
          }
        }
      ],
      "aggregate": {}
    }
  },
  "final_models": {
