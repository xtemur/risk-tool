"""
Email Service Demo

Demonstrates the usage of the email service for sending trading signals,
daily summaries, and other automated reports.
"""

import sys
import os
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Add the src directory to the Python path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root / "src"))

from email_service import EmailSender, SignalEmailService, EmailConfig
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def demo_basic_email_sending():
    """
    Demonstrate basic email sending functionality
    """
    print("\n1. Basic Email Sending Demo")
    print("=" * 40)

    try:
        # Initialize email service
        config = EmailConfig.from_env()
        sender = EmailSender(config)

        # Test connection
        print("Testing SMTP connection...")
        if sender.test_connection():
            print("‚úÖ SMTP connection successful")
        else:
            print("‚ùå SMTP connection failed")
            return False

        # Send simple HTML email
        html_content = """
        <html>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #333;">üìß Email Service Demo</h1>
            <p>This is a demonstration of the Risk Tool email service basic functionality.</p>

            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h2 style="color: #667eea;">Features Demonstrated:</h2>
                <ul>
                    <li>‚úÖ HTML email formatting</li>
                    <li>‚úÖ Professional styling</li>
                    <li>‚úÖ Responsive design</li>
                    <li>‚úÖ Error handling</li>
                </ul>
            </div>

            <p style="color: #666; font-size: 14px;">
                <strong>Time:</strong> Generated at demo runtime<br>
                <strong>Service:</strong> Risk Tool Email Service
            </p>
        </body>
        </html>
        """

        text_content = """
        EMAIL SERVICE DEMO

        This is a demonstration of the Risk Tool email service basic functionality.

        Features Demonstrated:
        - HTML email formatting
        - Professional styling
        - Responsive design
        - Error handling

        Generated by Risk Tool Email Service
        """

        print("Sending basic HTML email...")
        success = sender.send_email(
            to_emails=config.email_to,
            subject="üìß Risk Tool Email Service Demo",
            html_content=html_content,
            text_content=text_content
        )

        if success:
            print("‚úÖ Basic email sent successfully")
        else:
            print("‚ùå Failed to send basic email")

        return success

    except Exception as e:
        print(f"‚ùå Error in basic email demo: {e}")
        return False


def demo_signal_email():
    """
    Demonstrate trading signal email functionality
    """
    print("\n2. Trading Signal Email Demo")
    print("=" * 40)

    try:
        # Initialize signal email service
        signal_service = SignalEmailService()

        # Create comprehensive sample prediction data
        sample_predictions = {
            'traders': {
                'TRADER001': {
                    'name': 'Alpha Trader',
                    'predicted_pnl': 245.75,
                    'confidence': 0.87,
                    'recent_performance': 1250.30,
                    'risk_notes': 'High confidence signal with strong recent performance'
                },
                'TRADER002': {
                    'name': 'Beta Trader',
                    'predicted_pnl': -125.50,
                    'confidence': 0.72,
                    'recent_performance': -85.20,
                    'risk_notes': 'Consider position reduction due to negative trend'
                },
                'TRADER003': {
                    'name': 'Gamma Trader',
                    'predicted_pnl': 89.25,
                    'confidence': 0.64,
                    'recent_performance': 340.15
                },
                'TRADER004': {
                    'name': 'Delta Trader',
                    'predicted_pnl': 15.80,
                    'confidence': 0.45,
                    'recent_performance': 25.50,
                    'risk_notes': 'Low confidence - monitor closely'
                },
                'TRADER005': {
                    'name': 'Epsilon Trader',
                    'predicted_pnl': 425.60,
                    'confidence': 0.91,
                    'recent_performance': 850.75
                }
            },
            'model_performance': {
                'hit_rate': 0.728,
                'sharpe_ratio': 1.45,
                'r2_score': 0.18,
                'model_version': 'v2.3-demo'
            },
            'market_context': {
                'market_volatility': 22.5,
                'trading_volume_pct': 18.7,
                'market_trend': 'Bullish',
                'risk_level': 'Medium-High',
                'vix_level': 19.8,
                'sector_rotation': 'Technology outperforming'
            }
        }

        print("Generating and sending comprehensive signal email...")

        success = signal_service.send_signal_email(
            predictions=sample_predictions,
            subject="üîÆ Comprehensive Trading Signals Demo",
            include_performance=True,
            include_market_context=True
        )

        if success:
            print("‚úÖ Signal email sent successfully")
            print("   - 5 trader predictions included")
            print("   - Model performance metrics included")
            print("   - Market context provided")
            print("   - Risk alerts generated")
        else:
            print("‚ùå Failed to send signal email")

        return success

    except Exception as e:
        print(f"‚ùå Error in signal email demo: {e}")
        return False


def demo_template_customization():
    """
    Demonstrate template customization capabilities
    """
    print("\n3. Template Customization Demo")
    print("=" * 40)

    try:
        signal_service = SignalEmailService()

        # Create data that will trigger various template features
        edge_case_predictions = {
            'traders': {
                'HIGH_CONF': {
                    'name': 'High Confidence Trader',
                    'predicted_pnl': 850.25,
                    'confidence': 0.95,
                    'recent_performance': 2150.75,
                    'risk_notes': 'Exceptionally strong signals - maximum position recommended'
                },
                'LOW_CONF': {
                    'name': 'Low Confidence Trader',
                    'predicted_pnl': -50.30,
                    'confidence': 0.25,
                    'recent_performance': -380.45,
                    'risk_notes': 'Very low confidence - consider market exit'
                },
                'NEUTRAL': {
                    'name': 'Neutral Trader',
                    'predicted_pnl': 12.50,
                    'confidence': 0.52,
                    'recent_performance': 45.80
                }
            },
            'model_performance': {
                'hit_rate': 0.42,  # Low hit rate to trigger warning
                'sharpe_ratio': 0.85,
                'r2_score': 0.08,
                'model_version': 'v1.0-edge-case'
            },
            'market_context': {
                'market_volatility': 35.2,  # High volatility
                'market_trend': 'Highly Volatile',
                'risk_level': 'Extreme',
                'economic_events': 'Fed announcement pending'
            }
        }

        print("Sending template customization demo with edge cases...")
        print("  - High and low confidence predictions")
        print("  - Performance warning alerts")
        print("  - Market volatility alerts")

        success = signal_service.send_signal_email(
            predictions=edge_case_predictions,
            subject="‚ö†Ô∏è Template Customization Demo - Edge Cases",
            include_performance=True,
            include_market_context=True
        )

        if success:
            print("‚úÖ Customization demo email sent successfully")
            print("   - Alert system demonstrated")
            print("   - Edge case handling shown")
            print("   - Template flexibility highlighted")
        else:
            print("‚ùå Failed to send customization demo email")

        return success

    except Exception as e:
        print(f"‚ùå Error in template customization demo: {e}")
        return False


def demo_multiple_recipients():
    """
    Demonstrate sending to multiple recipients
    """
    print("\n4. Multiple Recipients Demo")
    print("=" * 40)

    try:
        config = EmailConfig.from_env()
        sender = EmailSender(config)

        # For demo purposes, we'll send to the same email multiple times
        # In production, you would use different email addresses
        recipients = [
            config.email_to,  # Primary recipient
            # Add more recipients as needed for actual use
        ]

        html_content = """
        <html>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #333;">üë• Multiple Recipients Demo</h1>
            <p>This email demonstrates sending to multiple recipients simultaneously.</p>

            <div style="background-color: #e7f3ff; padding: 15px; border-radius: 8px;">
                <h3 style="color: #0066cc;">üìã Demo Features:</h3>
                <ul>
                    <li>Multiple TO recipients</li>
                    <li>CC and BCC support</li>
                    <li>Bulk email handling</li>
                    <li>Error resilience</li>
                </ul>
            </div>

            <p><em>This is a demonstration of the Risk Tool email service capabilities.</em></p>
        </body>
        </html>
        """

        print(f"Sending to {len(recipients)} recipient(s)...")

        success = sender.send_email(
            to_emails=recipients,
            subject="üë• Multiple Recipients Demo",
            html_content=html_content
        )

        if success:
            print("‚úÖ Multiple recipients email sent successfully")
        else:
            print("‚ùå Failed to send multiple recipients email")

        return success

    except Exception as e:
        print(f"‚ùå Error in multiple recipients demo: {e}")
        return False


def main():
    """
    Run all email service demonstrations
    """
    print("=" * 60)
    print("üöÄ RISK TOOL EMAIL SERVICE DEMO")
    print("=" * 60)

    # Check environment configuration
    try:
        config = EmailConfig.from_env()
        if not config.validate():
            print("‚ùå Invalid email configuration. Please check environment variables:")
            print("   - EMAIL_FROM: Sender email address")
            print("   - EMAIL_PASSWORD: Email password (app password for Gmail)")
            print("   - EMAIL_TO: Recipient email address")
            return
    except Exception as e:
        print(f"‚ùå Configuration error: {e}")
        return

    print(f"üìß Configured to send from: {config.email_from}")
    print(f"üìß Default recipient: {config.email_to}")

    # Run all demonstrations
    results = {
        'basic_email': demo_basic_email_sending(),
        'signal_email': demo_signal_email(),
        'template_customization': demo_template_customization(),
        'multiple_recipients': demo_multiple_recipients()
    }

    # Summary
    print("\n" + "=" * 60)
    print("üìä DEMO RESULTS SUMMARY")
    print("=" * 60)

    total_tests = len(results)
    passed_tests = sum(results.values())

    for test_name, success in results.items():
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{test_name.replace('_', ' ').title()}: {status}")

    print(f"\nOverall: {passed_tests}/{total_tests} tests passed")

    if passed_tests == total_tests:
        print("\nüéâ All email service demonstrations completed successfully!")
        print("\nNext Steps:")
        print("‚Ä¢ Use 'python make_signal.py' for live signal generation")
        print("‚Ä¢ Customize templates in src/email_service/templates/")
        print("‚Ä¢ Add new email types by extending SignalEmailService")
        print("‚Ä¢ Check your email inbox for demonstration emails")
    else:
        print(f"\n‚ö†Ô∏è Some demonstrations failed. Check logs for details.")
        print("‚Ä¢ Verify email configuration")
        print("‚Ä¢ Check SMTP server connectivity")
        print("‚Ä¢ Review error messages above")

    print("\n" + "=" * 60)


if __name__ == "__main__":
    main()
